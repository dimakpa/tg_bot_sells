from aiogram import Router, types
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from services.report_service import ReportService
from storage.models import TransactionKind
from keyboards.main import get_main_keyboard
from loguru import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
from utils.message_utils import _edit_callback_message, _send_step_message

router = Router()


@router.callback_query(lambda c: c.data.startswith("export:"))
async def handle_export(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
	# formats:
	# export:expense:days
	# export:income:days
	# export:income:days:aggregation  where aggregation in {detail,by_category,by_subcategory,overall}
	parts = callback.data.split(":")
	_, kind_str, days_str, *rest = parts
	days = int(days_str)
	aggregation = rest[0] if rest else None
	kind = TransactionKind.EXPENSE if kind_str == "expense" else TransactionKind.INCOME
	
	end = datetime.utcnow()
	start = end - timedelta(days=days)
	service = ReportService(session)
	xlsx_path, png_paths, summary = await service.build_report(
		user_id=callback.from_user.id,
		kind=kind,
		start_date=start,
		end_date=end,
		aggregation=aggregation,
	)
	
	title = '–¢—Ä–∞—Ç—ã' if kind == TransactionKind.EXPENSE else '–ü—Ä–æ–¥–∞–∂–∏'
	caption_base = f"–û—Ç—á—ë—Ç: {title}\n–°—É–º–º–∞: {summary['total']:.2f}, –æ–ø–µ—Ä–∞—Ü–∏–π: {summary['count']}"
	
	await callback.message.answer_document(
		document=types.FSInputFile(str(xlsx_path)),
		caption=caption_base + "\n–§–æ—Ä–º–∞—Ç: Excel"
	)
	# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PNG(–∏)
	for p in png_paths:
		await callback.message.answer_document(
			document=types.FSInputFile(str(p)),
			caption=caption_base + "\n–§–æ—Ä–º–∞—Ç: PNG"
		)
	
	# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç—á–µ—Ç–æ–≤
	data = await state.get_data()
	prev_id = data.get("last_bot_message_id")
	if prev_id:
		try:
			await callback.bot.delete_message(callback.message.chat.id, prev_id)
		except Exception:
			pass
	
	await callback.message.answer("–ì–æ—Ç–æ–≤–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
	await callback.answer("–ì–æ—Ç–æ–≤–æ")


@router.callback_query(lambda c: c.data == "export_report")
async def export_menu(callback: types.CallbackQuery, state: FSMContext):
	text = "üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞: –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø"
	from aiogram.utils.keyboard import InlineKeyboardBuilder
	kb = InlineKeyboardBuilder()
	kb.row(
		types.InlineKeyboardButton(text="–¢—Ä–∞—Ç—ã 30–¥", callback_data="export:expense:30:detail"),
		types.InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∏ 30–¥", callback_data="export:income:30:detail"),
	)
	kb.row(
		types.InlineKeyboardButton(text="–¢—Ä–∞—Ç—ã: –∫–∞—Ç.", callback_data="export:expense:30:by_category"),
		types.InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∏: –∫–∞—Ç.", callback_data="export:income:30:by_category"),
	)
	kb.row(
		types.InlineKeyboardButton(text="–¢—Ä–∞—Ç—ã: –ø–æ–¥–∫–∞—Ç.", callback_data="export:expense:30:by_subcategory"),
		types.InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∏: –ø–æ–¥–∫–∞—Ç.", callback_data="export:income:30:by_subcategory"),
	)
	kb.row(
		types.InlineKeyboardButton(text="–¢—Ä–∞—Ç—ã: —Å–µ–∫—Ü–∏–∏", callback_data="export:expense:30:by_category_sections"),
		types.InlineKeyboardButton(text="–¢—Ä–∞—Ç—ã: –∏—Ç–æ–≥–æ", callback_data="export:expense:30:overall"),
	)
	kb.row(
		types.InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∏: –∏—Ç–æ–≥–æ", callback_data="export:income:30:overall"),
	)
	await _edit_callback_message(callback, state, text, reply_markup=kb.as_markup()) 