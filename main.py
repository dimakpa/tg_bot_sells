import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from config import settings
from storage.database import init_db, get_db, close_db
from storage.categories import load_categories_from_json
from services.transaction_service import TransactionService, parse_amount
from keyboards.main import get_main_keyboard, get_quick_actions_keyboard, get_cancel_keyboard
from keyboards.categories import get_categories_keyboard, get_quick_income_keyboard, get_confirm_keyboard
from storage.models import TransactionKind
from storage.categories import get_categories_by_kind, get_subcategories, get_category_by_id
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("bot.log", rotation="1 day", retention="7 days", level="INFO")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.bot_token)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
from middlewares.db import DatabaseSessionMiddleware
# –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware, —á—Ç–æ–±—ã –≤–Ω–µ–¥—Ä—è—Ç—å AsyncSession –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

dp.update.middleware(DatabaseSessionMiddleware())


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TransactionStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_subcategory = State()
    waiting_for_comment = State()
    waiting_for_amount = State()
    waiting_for_confirmation = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    transaction_service = TransactionService(session)
    await transaction_service.get_or_create_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

–Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard())


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/undo - –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–ø–µ—Ä–∞—Ü–∏—é (–≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
/edit_last - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–ø–µ—Ä–∞—Ü–∏—é
/export - –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞

üí° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üí∞ –¢—Ä–∞—Ç–∞" –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üí∏ –ü—Ä–æ–¥–∞–∂–∞" –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–æ—Ö–æ–¥–æ–≤
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥–∞–∂–∏" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤
    """
    
    await message.answer(help_text, reply_markup=get_main_keyboard())


@dp.message(Command("undo"))
async def cmd_undo(message: types.Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /undo"""
    user_id = message.from_user.id
    transaction_service = TransactionService(session)
    
    deleted_transaction = await transaction_service.delete_last_transaction(user_id)
    
    if deleted_transaction:
        await message.answer(
            f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞:\n"
            f"–°—É–º–º–∞: {deleted_transaction.amount} {deleted_transaction.currency}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {deleted_transaction.category_id}"
        )
    else:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã (–∏–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç)")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(lambda c: c.data == "expense")
async def process_expense(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞—Ç—ã"""
    await state.set_state(TransactionStates.waiting_for_category)
    await state.update_data(kind="expense")
    
    categories = await get_categories_by_kind(session, TransactionKind.EXPENSE)
    keyboard = get_categories_keyboard(categories, "expense")
    
    await callback.message.edit_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞—Ç—ã:",
        reply_markup=keyboard
    )


@dp.callback_query(lambda c: c.data == "income")
async def process_income(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    await state.set_state(TransactionStates.waiting_for_category)
    await state.update_data(kind="income")
    
    keyboard = get_quick_income_keyboard()
    
    await callback.message.edit_text(
        "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏:",
        reply_markup=keyboard
    )


@dp.callback_query(lambda c: c.data.startswith("expense_category:") or c.data.startswith("income_category:"))
async def process_category_selection(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = await get_category_by_id(session, category_id)
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategories = await get_subcategories(session, category_id)
    
    if subcategories:
        # –ï—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏—Ö –≤—ã–±–æ—Ä—É
        await state.set_state(TransactionStates.waiting_for_subcategory)
        await state.update_data(category_id=category_id, category_name=category.name)
        
        keyboard = get_categories_keyboard(subcategories, "subcategory")
        await callback.message.edit_text(
            f"üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è '{category.name}':",
            reply_markup=keyboard
        )
    else:
        # –ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
        await state.set_state(TransactionStates.waiting_for_comment)
        await state.update_data(
            category_id=category_id,
            category_name=category.name,
            subcategory_id=None,
            subcategory_name=None
        )
        
        await callback.message.edit_text(
            f"üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ '{category.name}' (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
            reply_markup=get_cancel_keyboard()
        )


@dp.callback_query(lambda c: c.data.startswith("quick_income:"))
async def process_quick_income(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞"""
    category_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = await get_category_by_id(session, category_id)
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await state.set_state(TransactionStates.waiting_for_comment)
    await state.update_data(
        category_id=category_id,
        category_name=category.name,
        subcategory_id=None,
        subcategory_name=None
    )
    
    await callback.message.edit_text(
        f"üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ '{category.name}' (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=get_cancel_keyboard()
    )


@dp.callback_query(lambda c: c.data.startswith("subcategory_category:"))
async def process_subcategory_selection(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    subcategory_id = int(callback.data.split(":")[1])
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    subcategory = await get_category_by_id(session, subcategory_id)
    if not subcategory:
        await callback.answer("‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await state.set_state(TransactionStates.waiting_for_comment)
    await state.update_data(
        subcategory_id=subcategory_id,
        subcategory_name=subcategory.name
    )
    
    await callback.message.edit_text(
        f"üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ '{data['category_name']} ‚Üí {subcategory.name}' (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=get_cancel_keyboard()
    )


@dp.message(TransactionStates.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    comment = message.text.strip()
    if comment == "-":
        comment = None
    
    await state.update_data(comment=comment)
    await state.set_state(TransactionStates.waiting_for_amount)
    
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=get_cancel_keyboard()
    )


@dp.message(TransactionStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    amount = parse_amount(message.text)
    
    if amount is None:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000, 1 500, 2.50):",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if amount <= 0:
        await message.answer(
            "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    data = await state.get_data()
    await state.update_data(amount=amount)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    kind_text = "—Ç—Ä–∞—Ç–∞" if data['kind'] == 'expense' else "–¥–æ—Ö–æ–¥"
    category_text = data['category_name']
    if data.get('subcategory_name'):
        category_text += f" ‚Üí {data['subcategory_name']}"
    
    comment_text = f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '–Ω–µ —É–∫–∞–∑–∞–Ω')}" if data.get('comment') else "\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –Ω–µ —É–∫–∞–∑–∞–Ω"
    
    confirm_text = f"""
üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:

üí∞ –¢–∏–ø: {kind_text}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_text}
üíµ –°—É–º–º–∞: {amount} RUB{comment_text}

–í—Å—ë –≤–µ—Ä–Ω–æ?
    """
    
    await state.set_state(TransactionStates.waiting_for_confirmation)
    sub_id = data.get('subcategory_id') or ''
    comment_val = data.get('comment') or ''
    await message.answer(
        confirm_text,
        reply_markup=get_confirm_keyboard("transaction", f"{data['kind']}:{data['category_id']}:{sub_id}:{amount}:{comment_val}")
    )


@dp.callback_query(lambda c: c.data.startswith("transaction_confirm:"))
async def process_confirmation(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    data_str = callback.data.split(":", 1)[1]
    kind, category_id, subcategory_id, amount, comment = data_str.split(":", 4)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    category_id = int(category_id)
    subcategory_id = int(subcategory_id) if (subcategory_id and subcategory_id != 'None') else None
    amount = parse_amount(amount)
    comment = comment if comment != '' else None
    
    if amount is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction_service = TransactionService(session)
        transaction = await transaction_service.create_transaction(
            user_id=callback.from_user.id,
            kind=TransactionKind(kind),
            category_id=category_id,
            subcategory_id=subcategory_id,
            amount=amount,
            comment=comment
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        kind_text = "—Ç—Ä–∞—Ç–∞" if kind == 'expense' else "–¥–æ—Ö–æ–¥"
        await callback.message.edit_text(
            f"‚úÖ {kind_text.capitalize()} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!\n"
            f"üí∞ –°—É–º–º–∞: {amount} RUB\n"
            f"üÜî ID: {transaction.id}",
            reply_markup=get_quick_actions_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_keyboard()
        )


@dp.callback_query(lambda c: c.data == "cancel")
async def process_cancel(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_main_keyboard()
    )


@dp.callback_query(lambda c: c.data == "main_menu")
async def process_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )


@dp.callback_query(lambda c: c.data == "add_another")
async def process_add_another(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â—ë –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await callback.message.edit_text(
        "‚ûï –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∏)
@dp.callback_query(lambda c: c.data in ["view_expenses", "view_incomes", "recent_transactions", "export_report"])
async def process_view_operations(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏)"""
    operation = callback.data
    
    if operation == "view_expenses":
        text = "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞—Ç (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    elif operation == "view_incomes":
        text = "üìà –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥–∞–∂ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    elif operation == "recent_transactions":
        text = "üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    elif operation == "export_report":
        text = "üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_main_keyboard()
    )


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async for session in get_db():
        await load_categories_from_json(session)
        break
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ polling
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    finally:
        await close_db()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())