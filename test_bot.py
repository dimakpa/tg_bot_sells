#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""

import asyncio
from decimal import Decimal
from storage.database import init_db, get_db
from storage.categories import load_categories_from_json
from storage.models import TransactionKind, Transaction
from services.transaction_service import TransactionService
from loguru import logger


async def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async for session in get_db():
        await load_categories_from_json(session)
        break
    
    logger.info("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    from storage.categories import get_categories_by_kind
    
    async for session in get_db():
        expense_categories = await get_categories_by_kind(session, TransactionKind.EXPENSE)
        income_categories = await get_categories_by_kind(session, TransactionKind.INCOME)
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(expense_categories)}")
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤: {len(income_categories)}")
        
        # –í—ã–≤–æ–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        logger.info("–ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤:")
        for cat in expense_categories[:3]:
            logger.info(f"  - {cat.name} (ID: {cat.id})")
        
        logger.info("–ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤:")
        for cat in income_categories[:3]:
            logger.info(f"  - {cat.name} (ID: {cat.id})")
        
        break


async def test_create_transactions():
    """–¢–µ—Å—Ç: —Å–æ–∑–¥–∞—ë–º –¥–æ—Ö–æ–¥ –∏ —Ä–∞—Å—Ö–æ–¥ –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –ë–î"""
    from sqlalchemy import select
    
    async for session in get_db():
        service = TransactionService(session)
        user_id = 999999999  # —Ç–µ—Å—Ç–æ–≤—ã–π user id
        await service.get_or_create_user(user_id=user_id, username="tester")
        
        # —Å–æ–∑–¥–∞—ë–º –¥–æ—Ö–æ–¥ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è 103 "–ú—ë–¥ 1 –ª")
        income_tx = await service.create_transaction(
            user_id=user_id,
            kind=TransactionKind.INCOME,
            category_id=103,
            subcategory_id=None,
            amount=Decimal("700.00"),
            comment="test income"
        )
        assert income_tx.id is not None and income_tx.id > 0
        assert income_tx.amount == Decimal("700.00")
        
        # —Å–æ–∑–¥–∞—ë–º —Ä–∞—Å—Ö–æ–¥ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è 36 "–ü–æ–¥–∞—Ä–∫–∏", –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è 40 "–î—Ä—É–≥–æ–µ")
        expense_tx = await service.create_transaction(
            user_id=user_id,
            kind=TransactionKind.EXPENSE,
            category_id=36,
            subcategory_id=40,
            amount=Decimal("50.00"),
            comment="test expense"
        )
        assert expense_tx.id is not None and expense_tx.id > 0
        assert expense_tx.amount == Decimal("50.00")
        
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ–≥–æ 2 –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Transaction).where(Transaction.user_id == user_id))
        rows = result.scalars().all()
        assert len(rows) >= 2
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(rows)} (id: {[t.id for t in rows]})")
        break


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    try:
        await test_database()
        await test_create_transactions()
        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
